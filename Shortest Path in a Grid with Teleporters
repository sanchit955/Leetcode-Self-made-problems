🌟 Welcome to my repository of custom LeetCode problems! 🌟  
This repository is a collection of unique, interview-focused coding challenges I’ve designed to push the boundaries of problem-solving. Each problem is crafted to be engaging, medium-to-hard, and perfect for honing skills needed for technical interviews.  
📚 Featured Problem: Shortest Path in a Grid with Teleporters  

Shortest Path in a Grid with Teleporters 🗺️✨
Problem Description
You’re given a 2D grid of size m x n, where each cell can be:  

'.': An empty cell you can walk through.  
'#': An obstacle you cannot pass.  
A letter from 'A' to 'Z': A teleporter. All cells with the same letter are connected, allowing instant movement between them without counting as a move.

Your goal is to find the minimum number of moves to go from (0, 0) to (m-1, n-1). You can move to adjacent cells (up, down, left, right) if they’re not obstacles, with each move counting as one. Teleportation between cells with the same letter is free (zero moves). If no path exists, return -1.  
Constraints:

1 <= m, n <= 100  
The grid contains at least two cells.  
The start (0, 0) and end (m-1, n-1) cells are always '.' or a letter, not '#'.  
Multiple teleporters can share the same letter.

Examples:
Example 1:
Input:  
grid = [
  ['.', 'A', '.'],
  ['.', '#', '.'],
  ['.', 'A', '.']
]

Output: 2Explanation: One possible path is (0,0) -> (0,1) ['A', 1 move] -> teleport to (2,1) ['A', 0 moves] -> (2,2) [1 move]. Total path length is 2 moves.  
Example 2:
Input:  
grid = [
  ['.', '.', '.'],
  ['.', '#', '.'],
  ['.', '.', '.']
]

Output: 4Explanation: No teleporters, so the shortest path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), requiring 4 moves.  
Example 3:
Input:  
grid = [
  ['.', '#', 'A'],
  ['#', '#', '#'],
  ['B', '#', '.']
]

Output: -1Explanation: No path exists due to obstacles.  
Example 4:
Input:  
grid = [
  ['A', '.'],
  ['.', 'A']
]

Output: 0Explanation: Start at (0,0) ['A'] and teleport to (1,1) ['A'], requiring 0 moves.  
Example 5:
Input:  
grid = [
  ['A', 'B'],
  ['B', 'A']
]

Output: 0Explanation: Start at (0,0) ['A'], teleport to (1,1) ['A'], requiring 0 moves.  
Example 6:
Input:  
grid = [
  ['.', 'B', '.'],
  ['A', '#', 'A'],
  ['.', 'B', '.']
]

Output: 2Explanation: Path: (0,0) -> (0,1) ['B', 1 move] -> teleport to (2,1) ['B', 0 moves] -> (2,2) [1 move].  

Solution Approach
This problem is solved using Breadth-First Search (BFS) by modeling the grid as a graph:  

Nodes: Each cell in the grid.  
Edges: Connect adjacent cells (up, down, left, right) if not obstacles (cost = 1 move) and connect all cells with the same teleporter letter (cost = 0 moves).

Detailed Steps:

Preprocess Teleporters 🛠️: Create a dictionary mapping each teleporter letter to a list of its cell coordinates.  
Initialize BFS 🚀: Start with (0, 0) at distance 0 in a queue. Use a set to track visited cells.  
Explore Neighbors 🔍: For each cell, enqueue unvisited adjacent cells (not obstacles) with distance +1.  
Handle Teleporters 🚪: If the current cell is a teleporter, enqueue all unvisited cells with the same letter at the same distance.  
Check Target 🎯: If (m-1, n-1) is reached, return the distance. If the queue empties without reaching the target, return -1.

Complexity Analysis:

Time Complexity: O(m * n * (m * n + T)), where m * n is the grid size and T is the total number of teleporter cells. Each cell can be visited once, and for each teleporter cell, we may explore other teleporter cells with the same letter.  
Space Complexity: O(m * n) for the queue and visited set, plus O(T) for the teleporter dictionary.


Solution Code
from collections import deque, defaultdict

def shortestPath(grid):
    if not grid or not grid[0]:
        return -1
    m, n = len(grid), len(grid[0])
    
    # Step 1: Group teleporters by letter
    teleporters = defaultdict(list)
    for i in range(m):
        for j in range(n):
            if grid[i][j].isalpha():
                teleporters[grid[i][j]].append((i, j))
    
    # Step 2: BFS
    queue = deque([(0, 0, 0)])  # (row, col, distance)
    visited = {(0, 0)}
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    while queue:
        row, col, dist = queue.popleft()
        if (row, col) == (m-1, n-1):
            return dist
        
        # Step 3: Check adjacent cells
        for dr, dc in directions:
            r, c = row + dr, col + dc
            if 0 <= r < m and 0 <= c < n and grid[r][c] != '#' and (r, c) not in visited:
                visited.add((r, c))
                queue.append((r, c, dist + 1))
        
        # Step 4: Check teleporters
        if grid[row][col].isalpha():
            for r, c in teleporters[grid[row][col]]:
                if (r, c) not in visited:
                    visited.add((r, c))
                    queue.append((r, c, dist))
    
    return -1


Test Cases
Below are comprehensive test cases to validate the solution:  



Test Case
Input Grid
Output
Explanation



1
grid = [['.', 'A', '.'], ['.', '#', '.'], ['.', 'A', '.']]
2
Path: (0,0) -> (0,1) ['A', 1 move] -> teleport to (2,1) ['A', 0 moves] -> (2,2) [1 move].


2
grid = [['.', '.', '.'], ['.', '#', '.'], ['.', '.', '.']]
4
Standard shortest path without teleporters: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2).


3
grid = [['.', '#', 'A'], ['#', '#', '#'], ['B', '#', '.']]
-1
No path exists due to obstacles.


4
grid = [['A', '.'], ['.', 'A']]
0
Start at (0,0) ['A'] and teleport to (1,1) ['A'], requiring 0 moves.


5
grid = [['A', 'B'], ['B', 'A']]
0
Start at (0,0) ['A'], teleport to (1,1) ['A'], requiring 0 moves.


6
grid = [['.', 'B', '.'], ['A', '#', 'A'], ['.', 'B', '.']]
2
Path: (0,0) -> (0,1) ['B', 1 move] -> teleport to (2,1) ['B', 0 moves] -> (2,2) [1 move].



Why This Problem? 🤔
This problem is unique because it combines classic grid traversal with a novel teleporter mechanic, testing your ability to adapt BFS to handle zero-cost transitions. It’s ideal for:  

Interview Prep: Challenges like this are common in technical interviews at companies like Google, Amazon, and Microsoft.  
Skill Building: Enhances your understanding of graph algorithms and optimization.  
Creative Thinking: The teleporter feature encourages out-of-the-box solutions.


Related Problems 🔗
If you enjoyed this problem, check out these related LeetCode problems:  

LeetCode 1091: Shortest Path in Binary Matrix  
LeetCode 1293: Shortest Path in a Grid with Obstacles Elimination  
LeetCode 994: Rotting Oranges

These problems explore grid traversal but lack the teleporter twist, making this challenge a fresh addition!  

Contributing 🤝
Want to make this repo even better? Here’s how you can contribute:  

Open an Issue: Suggest improvements, report bugs, or propose new test cases.  
Submit a Pull Request: Add new problems, optimize the solution, or enhance documentation.  
Share Feedback: Comment on the problem’s difficulty, clarity, or potential variations.

Let’s build a vibrant hub for high-quality coding challenges! 🌟  

License 📄
This repository is licensed under the MIT License. Feel free to use, share, and modify the content, but please provide credit to the original author.  

Contact 📧
Have questions or ideas? Reach out via LinkedIn.
